#装饰器理解和整理
#--by celia, 2020.08.05
#note:
#1.以下#a和 #b段代码等价
#2.已知内容

'''
#这是一个闭包结构
def func1():
    def func2():
        print("我是func2")
    return func2
'''

#定义装饰器，形参、实参是个函数对象
#func1 是个装饰器
def func1(f):
    def func2():
        f()    #必须先调用一下形参函数(也就是f,随意什么名字都可以),下面的be_decorated函数才会被调用
        print("我是func2")
    return func2

##############################################################################
#a
@func1
def be_decorated():
    print("被装饰器装饰的函数")
    #被装饰的函数，其实是作为一个参数，传入到装饰器里面的

#be_decorated
#返回传入的be_decorated的函数对象
#再加一个()，代表调用这个函数对象
#调用函数be_decorated
be_decorated()
##############################################################################

##############################################################################
#b
aa = func1(be_decorated)  #be_decorated没有括号，是个函数对象，传入到func1装饰器里的
print(aa)   #aa打印出类似<function func1.<locals>.func2 at 0x00000122C3050310>
            #这说明aa是个函数对象

aa()        #aa加个括号，就是调用aa

#也可以这么写，等价于aa()
func1(be_decorated)()
##############################################################################

